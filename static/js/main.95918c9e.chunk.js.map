{"version":3,"sources":["sound/thump1.wav","sound/thump2.wav","components/Import.jsx","components/MoveHistory.jsx","components/App.js","index.js"],"names":["Import","importFEN","importPGN","useState","input","setInput","error","setError","placeholder","rows","cols","value","onChange","event","target","className","onClick","setTimeout","MoveHistory","history","selectedMove","onClickMove","clickMove","historyIndex","map","move","i","turn","Math","floor","lastMove","length","color","whiteMove","san","blackMove","whiteClassNames","blackClassNames","App","orientation","setOrientation","position","setPosition","setHistory","setSelectedMove","pieceSquare","setPieceSquare","squareStyles","setSquareStyles","dropSquareStyle","setDropSquareStyle","markedSquares","setMarkedSquares","game","useRef","useEffect","current","Chess","isShowingLatestMove","jumpToMove","fen","undefined","squareStyling","addMove","newHistory","verbose","newFen","addToHistory","playMoveSound","lastMoveInHistory","prev","flipOrientation","getLegalMoves","square","moves","to","combineSquareStyling","styleObj1","styleObj2","selectedSquare","styling","piece","get","backgroundColor","legalMoves","forEach","legalMove","background","borderRadius","sourceSquare","from","targetSquare","flags","includes","playPieceCaptureSfx","playPieceMoveSfx","useSound","moveSfx","volume","takeSfx","onKeyDown","key","tabIndex","Grid","container","width","onDrop","promotion","onMouseOverSquare","onMouseOutSquare","boardStyle","boxShadow","cursor","onDragOverSquare","onSquareClick","onSquareRightClick","updatedMarkedSquares","filter","el","reduce","styleObj","currentSquare","valid","validate_fen","console","log","load","pgnString","load_pgn","pgnHistory","Pgn","style","left","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95918c9e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/thump1.5dc21a1c.wav\";","export default __webpack_public_path__ + \"static/media/thump2.a452eeaf.wav\";","import './Import.css';\r\nimport React, { useState } from 'react';\r\n\r\nexport default function Import({ importFEN, importPGN }) {\r\n    const [input, setInput] = useState('');\r\n    const [error, setError] = useState(false);\r\n    \r\n    const errorMessage = 'Input is not in valid FEN or PGN notation';\r\n    const handleImport = () => {\r\n        setError(false);\r\n        const valid = importFEN(input) || importPGN(input);\r\n        if (!valid) {\r\n            setTimeout(() => setError(true), 200);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <textarea placeholder='Input PGN or FEN notation' rows='2' cols='77' value={input} onChange={event => setInput(event.target.value)} />\r\n            {error ? <p className='error-message'>{errorMessage}</p> : <br />}\r\n            <button onClick={handleImport}>Import</button>\r\n        </div>\r\n    );\r\n}","import './MoveHistory.css';\r\nimport React from 'react';\r\n\r\nexport default function MoveHistory({ history, selectedMove, onClickMove }) {\r\n    \r\n    const renderHistoryTable = () => {\r\n        return history.map((move, i, history) => {\r\n            const turn = Math.floor(i/2) + 1;\r\n            const lastMove = history.length && history.length-1;\r\n            if (move.color === 'b') {\r\n                const whiteMove = i >= 1 ? history[i-1].san : null;\r\n                const blackMove = move.san;\r\n                const whiteClassNames = (whiteMove === null\r\n                    ? 'empty-move'\r\n                    : (i-1 === selectedMove ? 'selected' : '') + ' move');\r\n                const blackClassNames = (i === selectedMove ? 'selected' : '') + ' move';\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className='rowTurn'>{turn}</td>\r\n                        <td className={whiteClassNames} onClick={() => whiteMove && clickMove(i-1)}>{whiteMove || '...'}</td>\r\n                        <td className={blackClassNames} onClick={() => blackMove && clickMove(i)}>{blackMove}</td>\r\n                    </tr>\r\n                );\r\n            } else if (move.color === 'w' && i === lastMove) {\r\n                const whiteMove = move.san;\r\n                const whiteClassNames = `${i === selectedMove ? 'selected' : ''} move`;\r\n                return (\r\n                    <tr key={i}>\r\n                        <td className='rowTurn'>{turn}</td>\r\n                        <td className={whiteClassNames} onClick={() => clickMove(i)}>{whiteMove}</td>\r\n                        <td />\r\n                    </tr>\r\n                );\r\n            } else return undefined;\r\n        });\r\n    }\r\n\r\n    const clickMove = (historyIndex) => {\r\n        // console.log(historyIndex, history.slice(0, historyIndex+1).map(move => move.san));\r\n        onClickMove(historyIndex);\r\n    }\r\n\r\n    return (\r\n        <div className='box'>\r\n            <h3 className='header'>Move History</h3>\r\n            <table>\r\n                <tbody>\r\n                    {renderHistoryTable()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport * as Chess from \"chess.js\";\r\nimport Chessboard from 'chessboardjsx';\r\nimport { Pgn } from 'cm-pgn';\r\nimport useSound from 'use-sound';\r\n\r\nimport moveSfx from '../sound/thump1.wav';\r\nimport takeSfx from '../sound/thump2.wav';\r\nimport Import from './Import';\r\nimport MoveHistory from './MoveHistory';\r\n\r\nconst DEFAULT_BOARD_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\nexport default function App() {\r\n    const [orientation, setOrientation] = useState('white')\r\n    const [position, setPosition] = useState('start');\r\n    const [history, setHistory] = useState([]);\r\n    const [selectedMove, setSelectedMove] = useState(-1);\r\n\r\n    const [pieceSquare, setPieceSquare] = useState('');\r\n\r\n    const [squareStyles, setSquareStyles] = useState({});\r\n    const [dropSquareStyle, setDropSquareStyle] = useState({});\r\n    const [markedSquares, setMarkedSquares] = useState([]);\r\n\r\n\r\n    const game = useRef(null);\r\n    useEffect(() => {\r\n        game.current = new Chess();\r\n    }, []);\r\n\r\n    const importFEN = (fen) => {\r\n        const { valid } = game.current.validate_fen(fen)\r\n        console.log('Import FEN ' + (valid ? 'success' : 'failed'));\r\n        if (valid) {\r\n            setHistory([]);\r\n            setSquareStyles({});\r\n            game.current.load(fen);\r\n            setPosition(fen);\r\n        }\r\n        return valid;\r\n    };\r\n\r\n    const importPGN = (pgnString) => {\r\n        const valid = game.current.load_pgn(pgnString);\r\n        const pgnHistory = new Pgn(pgnString).history.moves;\r\n        console.log('Import PGN ' + (valid ? 'success' : 'failed'));\r\n        if (valid) {\r\n            setHistory(pgnHistory);\r\n            setSquareStyles({});\r\n            setPosition(pgnHistory[pgnHistory.length-1].fen);\r\n            setSelectedMove(pgnHistory.length-1);\r\n\r\n            const move = pgnHistory[pgnHistory.length-1];\r\n            setSquareStyles(squareStyling('', move));\r\n        }\r\n        return valid;\r\n    }\r\n\r\n    const isShowingLatestMove = () => {\r\n        return (selectedMove+1 === history.length);\r\n    }\r\n    \r\n    const jumpToMove = (historyIndex) => {\r\n        if (historyIndex < 0)\r\n            setPosition(DEFAULT_BOARD_POSITION);\r\n        else\r\n            setPosition(history[historyIndex].fen);\r\n\r\n        setPieceSquare('');\r\n        setSelectedMove(historyIndex);\r\n        \r\n        const move = historyIndex >= 0 ? history[historyIndex] : undefined;\r\n        setSquareStyles(squareStyling('', move));\r\n    }\r\n\r\n    const addMove = (move) => {\r\n        setPosition(game.current.fen());\r\n        \r\n        const newHistory = game.current.history({ verbose: true });\r\n        const newFen = game.current.fen();\r\n        addToHistory(newHistory[newHistory.length-1], newFen);\r\n        \r\n        setPieceSquare('');\r\n        setSelectedMove(newHistory.length-1);\r\n        \r\n        setSquareStyles(squareStyling('', move));\r\n        playMoveSound(move);\r\n    }\r\n\r\n    const addToHistory = (lastMoveInHistory, newFen) => {\r\n        setHistory(prev => [\r\n            ...prev,\r\n            {\r\n                ...lastMoveInHistory,\r\n                fen: newFen\r\n            }\r\n        ]);\r\n    }\r\n\r\n    const flipOrientation = () => {\r\n        if (orientation === 'white') setOrientation('black');\r\n        else if (orientation === 'black') setOrientation('white');\r\n    }\r\n\r\n    const onDrop = ({ sourceSquare, targetSquare }) => {\r\n        if (!isShowingLatestMove()) return;\r\n\r\n        // see if the move is legal\r\n        const move = game.current.move({\r\n            from: sourceSquare,\r\n            to: targetSquare,\r\n            promotion: \"q\" // always promote to a queen for example simplicity\r\n        });\r\n\r\n        // illegal move\r\n        if (move === null)\r\n            return;\r\n        else\r\n            addMove(move);\r\n    };\r\n\r\n    const getLegalMoves = square => {\r\n        const moves = game.current.moves({\r\n            square: square,\r\n            verbose: true\r\n        });\r\n\r\n        return moves.map(move => move.to);\r\n    };\r\n\r\n    const onMouseOverSquare = square => {\r\n        // showLegalMoves(square);\r\n    };\r\n\r\n    const onMouseOutSquare = square => {\r\n        // removeHighlightSquare(square);\r\n    }\r\n\r\n    // central squares get diff dropSquareStyles\r\n    const onDragOverSquare = square => {\r\n        if (markedSquares.length)\r\n            setMarkedSquares([]);\r\n        setDropSquareStyle(\r\n            square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\r\n                ? { backgroundColor: \"cornFlowerBlue\" }\r\n                : { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" }\r\n        );\r\n    };\r\n\r\n    const onSquareClick = square => {\r\n        if (markedSquares.length)\r\n            setMarkedSquares([]);\r\n        if (pieceSquare === square) {\r\n            setPieceSquare('');\r\n            setSquareStyles(squareStyling(''));\r\n        } else {\r\n            if (!isShowingLatestMove()) return;\r\n            \r\n            const move = game.current.move({\r\n                from: pieceSquare,\r\n                to: square,\r\n                promotion: \"q\" // always promote to a queen for example simplicity\r\n            });\r\n    \r\n            // illegal move\r\n            if (move === null) {\r\n                setPieceSquare(square);\r\n                setSquareStyles(squareStyling(square));\r\n            }\r\n            // legal move\r\n            else if (move !== null) {\r\n                addMove(move);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onSquareRightClick = square => {\r\n        let updatedMarkedSquares;\r\n        if (markedSquares.includes(square)) {\r\n            updatedMarkedSquares = markedSquares.filter(el => el !== square);\r\n            setMarkedSquares(updatedMarkedSquares);\r\n        } else {\r\n            updatedMarkedSquares = [...markedSquares, square];\r\n            setMarkedSquares(updatedMarkedSquares);\r\n        }\r\n        setSquareStyles(\r\n            combineSquareStyling(\r\n                squareStyling(''),\r\n                updatedMarkedSquares.reduce((styleObj, currentSquare) => {\r\n                    return {\r\n                        ...styleObj,\r\n                        [currentSquare]: { backgroundColor: \"rgba(205, 92, 92, 0.8)\" }\r\n                    }\r\n                }, {})\r\n            )\r\n        );\r\n    };\r\n\r\n    const combineSquareStyling = (styleObj1, styleObj2) => {\r\n        return {\r\n            ...styleObj1,\r\n            ...styleObj2\r\n        };\r\n    };\r\n\r\n    const squareStyling = (selectedSquare, move=undefined) => {\r\n        let styling = {};\r\n\r\n        // show selected piece highlighting\r\n        const turn = game.current.turn();\r\n        const piece = game.current.get(selectedSquare);\r\n        if (piece && (turn === piece.color)) {\r\n            styling[selectedSquare] = { backgroundColor: \"rgba(255, 255, 0, 0.3)\" };\r\n\r\n            // show legal move highlighting\r\n            const legalMoves = getLegalMoves(selectedSquare);\r\n            legalMoves.forEach(legalMove => {\r\n                styling[legalMove] = {\r\n                    background: \"radial-gradient(circle, #ffff00 20%, transparent 30%)\",\r\n                    borderRadius: \"50%\"\r\n                }\r\n            });\r\n        }\r\n    \r\n        // show last-move highlighting\r\n        const lastMove = move;\r\n        if (lastMove) {\r\n            const sourceSquare = lastMove.from;\r\n            const targetSquare = lastMove.to;\r\n\r\n            styling[sourceSquare] = { backgroundColor: \"rgba(0, 200, 0, 0.3)\" };\r\n            styling[targetSquare] = { backgroundColor: \"rgba(0, 200, 0, 0.3)\" };\r\n        }\r\n    \r\n        return styling;\r\n    };\r\n\r\n    const handleKeyDown = event => {\r\n        if (event.key === 'ArrowLeft') {\r\n            if (selectedMove >= 0)\r\n                jumpToMove(selectedMove-1);\r\n        } else if (event.key === 'ArrowRight') {\r\n            if (selectedMove+1 < history.length)\r\n                jumpToMove(selectedMove+1);\r\n        } else if (event.key === 'ArrowUp' || event.key === '0') {\r\n            jumpToMove(-1);\r\n        } else if (event.key === 'ArrowDown') {\r\n            jumpToMove(history.length-1);\r\n        } else if (event.key === 'f') {\r\n            flipOrientation();\r\n        }\r\n    }\r\n\r\n    const playMoveSound = move => {\r\n        if (move == null)\r\n            return;\r\n\r\n        if (move.flags.includes('c') || move.flags.includes('e')) { // capture; en-passant\r\n            playPieceCaptureSfx();\r\n        } else if (move.flags.includes('k') || move.flags.includes('q')) { // castle\r\n            playPieceCaptureSfx();\r\n            setTimeout(() => playPieceMoveSfx(), 100);\r\n        } else {\r\n            playPieceMoveSfx();\r\n        }\r\n    };\r\n\r\n    const [playPieceMoveSfx] = useSound(\r\n        moveSfx,\r\n        { volume: 1.5 }\r\n    );\r\n\r\n    const [playPieceCaptureSfx] = useSound(\r\n        takeSfx,\r\n        { volume: 1.5 }\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\" onKeyDown={handleKeyDown} tabIndex=\"0\">\r\n            <h1>Chess</h1>\r\n            <Grid container>\r\n                <div>\r\n                    <Chessboard\r\n                        position={position}\r\n                        orientation={orientation}\r\n                        width={600}\r\n                        onDrop={onDrop}\r\n                        onMouseOverSquare={onMouseOverSquare}\r\n                        onMouseOutSquare={onMouseOutSquare}\r\n                        boardStyle={{\r\n                            borderRadius: \"5px\",\r\n                            boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\r\n                            cursor: 'pointer'\r\n                        }}\r\n                        squareStyles={squareStyles}\r\n                        dropSquareStyle={dropSquareStyle}\r\n                        onDragOverSquare={onDragOverSquare}\r\n                        onSquareClick={onSquareClick}\r\n                        onSquareRightClick={onSquareRightClick}\r\n                    />\r\n                    <br />\r\n                    <Import importFEN={importFEN} importPGN={importPGN} />\r\n                    <br />\r\n                    <button onClick={flipOrientation}>Flip</button>\r\n                </div>\r\n                <div style={{ position: 'absolute', left: '1000px' }}>\r\n                    <MoveHistory\r\n                        history={history}\r\n                        selectedMove={selectedMove}\r\n                        onClickMove={jumpToMove}\r\n                    />\r\n                </div>\r\n            </Grid>\r\n            <footer>\r\n                <div>\r\n                    Built by <a href='https://hwkerr.github.io'>Harrison Kerr</a>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}